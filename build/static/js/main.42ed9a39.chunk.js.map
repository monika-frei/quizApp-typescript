{"version":3,"sources":["components/QuesionCard.styles.ts","API.ts","components/QuestionCard.tsx","utils.ts","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","Category","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","cb","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","category","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","TOTAL_QUESTIONS","App","useState","loading","setLoading","questions","setQuestions","setQuestionNr","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","setCategory","setDifficulty","handleOptions","e","currentTarget","EASY","MEDIUM","HARD","BOOKS","FILM","MUSIC","startTrivia","newQuestions","console","log","length","undefined","prev","answerObject","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42ed9a39.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border: 1px solid #6a5fa2;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  position: relative;\r\n  transition: all 0.3s ease;\r\n\r\n  .questionNr {\r\n    align-self: flex-end;\r\n    padding: 0 10px;\r\n    color: #6a5fa2;\r\n    font-weight: 100;\r\n    position: absolute;\r\n    top: -25px;\r\n    background-color: #040462;\r\n  }\r\n  .question {\r\n    font-size: 1.2rem;\r\n    font-weight: 300;\r\n    padding: 0 10px;\r\n    margin: 10px auto;\r\n  }\r\n`;\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  .answer {\r\n    width: 300px;\r\n    margin: 10px;\r\n    padding: 5px;\r\n    background-color: #6a5fa2;\r\n    border: none;\r\n    border-radius: 20px;\r\n    cursor: pointer;\r\n    font-size: 1.2rem;\r\n    color: #040462;\r\n    background-color: ${({ correct, userClicked }) =>\r\n      correct ? \"green\" : !correct && userClicked ? \"#E22414\" : \"#6a5fa2\"};\r\n\r\n    &:hover {\r\n      opacity: 0.8;\r\n    }\r\n    &:disabled {\r\n      color: #040462;\r\n    }\r\n  }\r\n`;\r\n","import {shuffleArray} from \"./utils\"\r\n\r\n\r\nexport enum Difficulty  {\r\n    EASY=\"easy\",\r\n    MEDIUM=\"medium\",\r\n    HARD=\"hard\"\r\n}\r\n\r\nexport enum Category {\r\n    BOOKS= \"10\",\r\n    FILM = \"11\",\r\n    MUSIC = \"12\",\r\n\r\n}\r\n\r\nexport type Question = {\r\n    category: string,\r\n    correct_answer: string,\r\n    incorrect_answers: string[],\r\n    difficulty: string,\r\n    question: string;\r\n    type: string\r\n}\r\n\r\nexport type QuestionState = Question & ({answers: string[]})\r\n\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty, category: Category) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}&type=multiple`;\r\n    const data = await (await fetch(endpoint)).json();\r\n    return data.results.map((question: Question) => ( \r\n        {\r\n            ...question,\r\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n        }\r\n    ))\r\n}","import React from \"react\";\r\nimport { AnswerObject } from \"../App\";\r\nimport { Wrapper, ButtonWrapper } from \"./QuesionCard.styles\";\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  cb: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard = ({\r\n  question,\r\n  answers,\r\n  cb,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions,\r\n}: Props) => {\r\n  return (\r\n    <Wrapper>\r\n      <p className=\"questionNr\">\r\n        Question: {questionNr} / {totalQuestions}\r\n      </p>\r\n      <p\r\n        className=\"question\"\r\n        dangerouslySetInnerHTML={{ __html: question }}\r\n      ></p>\r\n      <div>\r\n        {answers.map((answer) => (\r\n          <ButtonWrapper\r\n            correct={userAnswer?.correctAnswer === answer}\r\n            userClicked={userAnswer?.answer === answer}\r\n            key={answer}\r\n          >\r\n            <button\r\n              disabled={userAnswer ? true : false}\r\n              value={answer}\r\n              onClick={cb}\r\n              className=\"answer\"\r\n            >\r\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default QuestionCard;\r\n","export const shuffleArray = (array: any[]) => [...array].sort(() => Math.random() - 0.5)","import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml{\r\n    height: 100%;\r\n    width: 100%;\r\n}\r\nbody {\r\n    background-color: #040462;\r\n    padding:0;\r\n    margin:0;\r\n    box-sizing: border-box;\r\n    font-family: \"Lato\" sans-serif;\r\n    color: #FBFBFC;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items:center;\r\n}\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  h1 {\r\n    font-size: 3.5rem;\r\n    color: #6a5fa2;\r\n    text-transform: uppercase;\r\n  }\r\n  h2 {\r\n    font-weight: 100;\r\n    margin: 20px 0 0 0;\r\n    color: #6a5fa2;\r\n    align-self: flex-start;\r\n    padding-left: 30px;\r\n  }\r\n  .btn-wrapper {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n  }\r\n  .score {\r\n    font-weight: 700;\r\n    color: #fbfbfc;\r\n    padding: 10px;\r\n    border: 1px solid #e25c4e;\r\n    background-color: #e22414;\r\n    border-radius: 10px;\r\n  }\r\n  .btn-options {\r\n    background-color: #f2aba6;\r\n    border: 2px solid #e25c4e;\r\n    border-radius: 20px;\r\n    margin: 5px 10px;\r\n    width: 200px;\r\n    height: 60px;\r\n    cursor: pointer;\r\n    font-size: 1.6rem;\r\n    color: #e22414;\r\n    &:hover,\r\n    &:active {\r\n      background-color: #e25c4e;\r\n      color: #fbfbfc;\r\n    }\r\n    &:active {\r\n      transform: scale(1.1);\r\n    }\r\n  }\r\n  .btn-choice {\r\n    background-color: #e25c4e;\r\n    color: #fbfbfc;\r\n  }\r\n  .btn-nav {\r\n    background-color: #e22414;\r\n    border: 2px solid #e25c4e;\r\n    border-radius: 20px;\r\n    margin: 80px auto;\r\n    width: 200px;\r\n    height: 80px;\r\n    cursor: pointer;\r\n    font-size: 1.8rem;\r\n    color: #fbfbfc;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\nimport QuestionCard from \"./components/QuestionCard\";\nimport { fetchQuizQuestions, Category, Difficulty, QuestionState } from \"./API\";\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nconst TOTAL_QUESTIONS = 10;\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [questionNr, setQuestionNr] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [category, setCategory] = useState<Category | null>(null);\n  const [difficulty, setDifficulty] = useState<Difficulty | null>(null);\n\n  const handleOptions = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const value = e.currentTarget.value;\n    if (\n      value === Difficulty.EASY ||\n      value === Difficulty.MEDIUM ||\n      value === Difficulty.HARD\n    ) {\n      setDifficulty(value);\n    } else if (\n      value === Category.BOOKS ||\n      value === Category.FILM ||\n      value === Category.MUSIC\n    ) {\n      setCategory(value);\n    }\n  };\n\n  const startTrivia = async () => {\n    //zrób try catch\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      difficulty ? difficulty : Difficulty.EASY,\n      category ? category : Category.MUSIC\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setQuestionNr(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[questionNr].correct_answer === answer;\n      if (correct) {\n        setScore((prev) => prev + 1);\n      }\n      const answerObject = {\n        question: questions[questionNr].question,\n        answer,\n        correct,\n        correctAnswer: questions[questionNr].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = questionNr + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setQuestionNr((prev) => prev + 1);\n    }\n  };\n  console.log(difficulty, category);\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper className=\"App\">\n        <h1>Quiz</h1>\n        {(gameOver || userAnswers.length === TOTAL_QUESTIONS) && (\n          <>\n            <h2>Category</h2>\n            <div className=\"btn-wrapper\">\n              <button\n                disabled={category ? true : false}\n                value={Category.BOOKS}\n                onClick={handleOptions}\n                className=\"btn-options\"\n              >\n                Books\n              </button>\n              <button\n                disabled={category ? true : false}\n                value={Category.FILM}\n                onClick={handleOptions}\n                className=\"btn-options\"\n              >\n                Film\n              </button>\n              <button\n                disabled={category ? true : false}\n                value={Category.MUSIC}\n                onClick={handleOptions}\n                className=\"btn-options\"\n              >\n                Music\n              </button>\n            </div>\n            <h2>Difficulty</h2>\n            <div className=\"btn-wrapper\">\n              <button\n                disabled={difficulty ? true : false}\n                value={Difficulty.EASY}\n                onClick={handleOptions}\n                className=\"btn-options\"\n              >\n                Easy\n              </button>\n              <button\n                disabled={difficulty ? true : false}\n                value={Difficulty.MEDIUM}\n                onClick={handleOptions}\n                className=\"btn-options\"\n              >\n                Medium\n              </button>\n              <button\n                disabled={difficulty ? true : false}\n                value={Difficulty.HARD}\n                onClick={handleOptions}\n                className=\"btn-options\"\n              >\n                Hard\n              </button>\n            </div>\n          </>\n        )}\n\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button onClick={startTrivia} className=\"btn-nav\">\n            Start\n          </button>\n        ) : null}\n        {!gameOver && <p className=\"score\">Score: {score}</p>}\n        {loading && <p>Loading...</p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={questionNr + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[questionNr].question}\n            answers={questions[questionNr].answers}\n            userAnswer={userAnswers ? userAnswers[questionNr] : undefined}\n            cb={checkAnswer}\n          />\n        )}\n        {!loading &&\n          !gameOver &&\n          userAnswers.length === questionNr + 1 &&\n          questionNr !== TOTAL_QUESTIONS - 1 && (\n            <button onClick={nextQuestion} className=\"btn-nav\">\n              Next\n            </button>\n          )}\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}